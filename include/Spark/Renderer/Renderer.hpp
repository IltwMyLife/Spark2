#pragma once

class RendererImpl;
class Window;

////////////////////////////////////////////////////////////
/// \brief Renderer
///
////////////////////////////////////////////////////////////
class Renderer
{
public:

	////////////////////////////////////////////////////////////
	/// \brief API
	///
	/// Available renderer api
	///
	////////////////////////////////////////////////////////////
	enum class API
	{
		Vulkan = 0,
	};

public:

	////////////////////////////////////////////////////////////
	/// \brief Default constructor
	///
	/// \param api Graphical api for rendering
	/// 
	/// This constructor doesn't actually create the renderer,
	/// use the other constructors or call create() to do so.
	///
	////////////////////////////////////////////////////////////
	Renderer(Renderer::API api);

	////////////////////////////////////////////////////////////
	/// \brief Create renderer
	///
	/// \param api    Graphical api for rendering
	/// \param window Window
	///
	////////////////////////////////////////////////////////////
	Renderer(Renderer::API api, const Window& window);

	////////////////////////////////////////////////////////////
	/// \brief Destructor
	///
	/// Destroy renderer.
	///
	////////////////////////////////////////////////////////////
	~Renderer();

public:

	////////////////////////////////////////////////////////////
	/// \brief Create renderer
	///
	/// \param window Window
	///
	////////////////////////////////////////////////////////////
	void create(const Window& window);

private:

	////////////////////////////////////////////////////////////
	// Member data
	////////////////////////////////////////////////////////////
	RendererImpl* m_impl; //!< Renderer implementation
};
