#pragma once

////////////////////////////////////////////////////////////
// Headers
////////////////////////////////////////////////////////////
#include <string>

////////////////////////////////////////////////////////////
/// \brief Abstract base class of window implementation
///
////////////////////////////////////////////////////////////
class WindowImpl
{
public:

	////////////////////////////////////////////////////////////
	/// \brief Default constructor
	///
	/// This constructor doesn't actually create the window,
	/// use the other constructors or call create() to do so.
	///
	////////////////////////////////////////////////////////////
	WindowImpl() = default;

	////////////////////////////////////////////////////////////
	/// \brief Create window implementation
	///
	/// \param title  Title of the window
	/// \param width  Width of the window
	/// \param height Height of the window
	///
	////////////////////////////////////////////////////////////
	WindowImpl(std::string title, uint32_t width, uint32_t height);

	////////////////////////////////////////////////////////////
	/// \brief Destructor
	///
	/// Destroy window.
	///
	////////////////////////////////////////////////////////////
	virtual ~WindowImpl() = default;

public:

	////////////////////////////////////////////////////////////
	/// \brief Create window
	///
	/// Create window.
	///
	/// \param title Title of the window
	/// \param width Width of the window
	/// \param height Height of the window
	///
	////////////////////////////////////////////////////////////
	virtual void create(std::string title, uint32_t width, uint32_t height) = 0;

	////////////////////////////////////////////////////////////
	/// \brief Destroy window
	///
	/// Destroy window.
	///
	////////////////////////////////////////////////////////////
	virtual void destroy() = 0;

	////////////////////////////////////////////////////////////
	/// \brief Proccess messages
	///
	/// Proccess messages.
	/// 
	////////////////////////////////////////////////////////////
	virtual void processMessages() = 0;

	////////////////////////////////////////////////////////////
	/// \brief Tell whether or not the window is open
	///
	/// \return True if the window is open, false if it has been closed.
	///
	////////////////////////////////////////////////////////////
	virtual bool isOpen() = 0;
};