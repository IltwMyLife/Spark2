////////////////////////////////////////////////////////////
// Headers
////////////////////////////////////////////////////////////
#include <Spark/Window/Window.hpp>
#include <Spark/Window/WindowImpl.hpp>

#ifdef WIN32
	
	#include <Spark/Window/Win32/WindowImplWin32.hpp>
	using WindowImplType = WindowImplWin32;

#endif

////////////////////////////////////////////////////////////
Window::Window()
{
	m_impl = new WindowImplType();
}

////////////////////////////////////////////////////////////
Window::Window(std::string title, uint32_t width, uint32_t height)
{
	m_impl = new WindowImplType(title, width, height);
}

////////////////////////////////////////////////////////////
Window::~Window()
{
	delete m_impl;
} 

////////////////////////////////////////////////////////////
void Window::create(std::string title, uint32_t width, uint32_t height)
{
	m_impl->create(std::move(title), width, height);
}

////////////////////////////////////////////////////////////
void Window::destroy()
{
	m_impl->destroy();
}

////////////////////////////////////////////////////////////
void Window::processMessages()
{
	m_impl->processMessages();
}

////////////////////////////////////////////////////////////
bool Window::isOpen()
{
	return m_impl->isOpen();
}
